# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AlreadyVotedError implements BaseError {
  message: String!
}

interface BaseError {
  message: String!
}

type Bookmark {
  id: ID!
  item: Item!
  itemId: Int!
  ownerId: String!
  type: BookmarkType!
}

type BookmarkPagination {
  items: [Bookmark!]!
  pageInfo: PaginationInfo!
}

union BookmarkResult = Bookmark | ItemNotFoundError

enum BookmarkType {
  Comment
  Post
}

enum CommentSort {
  DATE_ASC
  DATE_DESC
  LIKE_ASC
  LIKE_DESC
}

type CommentVote {
  id: ID!
  ownerId: String!
  value: VoteValue!
}

input CreateBookmarkData {
  itemId: Int!
  type: BookmarkType!
}

input CreatePostCommentData {
  imagePaths: [String!]
  postId: Int!
  text: String!
}

input CreatePostData {
  description: String!
  imagePaths: [String!]
  tags: [String!]
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

union Item = Post | PostComment

type ItemNotFoundError implements BaseError {
  message: String!
}

type Mutation {
  bookmarkCreate(data: CreateBookmarkData!): BookmarkResult!
  postAddComment(data: CreatePostCommentData!): PostResult!
  postCommentDisLike(id: ID!): PostCommentResult!
  postCommentLike(id: ID!): PostCommentResult!
  postCreate(data: CreatePostData!): Post!
  postDisLike(id: ID!): PostLikeResult!
  postLike(id: ID!): PostLikeResult!
}

type NotFoundError implements BaseError {
  message: String!
}

type PaginationInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  page: Int!
  perPage: Int!
  totalItems: Int!
  totalPages: Int!
}

type Post {
  comments(CommentSort: [CommentSort!], page: Int = 1, perPage: Int = 20): [PostComment]!
  commentsCount: Int!
  createdAt: DateTime!
  description: String!
  dislikes: Int!
  id: ID!
  images: [PostImage]!
  likes: Int!
  ownerId: String!
  tags: [PostTag]!
  title: String!
  votes: [PostVote]!
}

type PostComment {
  createdAt: DateTime!
  dislikes: Int!
  id: ID!
  images: [PostCommentImage]!
  likes: Int!
  ownerId: String!
  text: String!
  votes: [CommentVote]!
}

type PostCommentImage {
  filePath: String!
  id: ID!
}

union PostCommentResult = AlreadyVotedError | NotFoundError | PostComment

input PostFilter {
  group: PostGroup
  tags: [String!]
}

enum PostGroup {
  BEST
  HOT
  RECENT
}

type PostImage {
  filePath: String!
  id: ID!
}

union PostLikeResult = AlreadyVotedError | NotFoundError | Post

type PostPagination {
  items: [Post!]!
  pageInfo: PaginationInfo!
}

union PostResult = NotFoundError | Post

enum PostSort {
  createdAt_ASC
  createdAt_DESC
  likes_ASC
  likes_DESC
}

type PostTag {
  id: ID!
  name: String!
}

type PostVote {
  id: ID!
  ownerId: String!
  value: VoteValue!
}

type Query {
  bookmarks(page: Int = 1, perPage: Int = 20): BookmarkPagination!
  post(id: ID!): PostResult!
  posts(page: Int = 1, perPage: Int = 20, postFilter: PostFilter, postSort: [PostSort!]): PostPagination!
}

enum VoteValue {
  DISLIKE
  LIKE
}
